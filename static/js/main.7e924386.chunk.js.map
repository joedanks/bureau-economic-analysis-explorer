{"version":3,"sources":["beaService.js","DatasetSelect.js","Parameters.js","App.js","reportWebVitals.js","index.js"],"names":["beaBaseUrl","beaService","getDatasetList","apiKey","fetch","then","response","json","responseJson","BEAAPI","Results","results","Error","JSON","stringify","Dataset","getParameters","dataset","Parameter","DatasetSelect","props","value","onChange","e","setDataset","target","undefined","datasetList","map","ds","DatasetName","DatasetDescription","useStyles","makeStyles","table","minWidth","Parameters","classes","parameters","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","parameter","scope","ParameterName","ParameterDescription","ParameterIsRequiredFlag","App","useState","setApiKey","error","setError","setDatasetList","setParameters","useEffect","catch","message","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAAMA,G,MAAa,kCA6BJC,EA3BI,CACfC,eADe,SACAC,GACX,OAAOC,MAAM,GAAD,OAAIJ,EAAJ,mBAAyBG,EAAzB,2BACPE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIA,EAAaC,OAAOC,WACzCL,MAAK,SAAAM,GACF,GAAIA,EAAQC,MACR,MAAM,IAAIA,MAAMC,KAAKC,UAAUH,EAAQC,QAE3C,OAAOD,EAAQI,YAI3BC,cAbe,SAaDb,EAAQc,GAClB,OAAOb,MAAM,GAAD,OAAIJ,EAAJ,mBAAyBG,EAAzB,gDAAuEc,IAClFZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIA,EAAaC,OAAOC,WACzCL,MAAK,SAAAM,GACF,GAAIA,EAAQC,MACR,MAAM,IAAIA,MAAMC,KAAKC,UAAUH,EAAQC,QAE3C,OAAOD,EAAQO,eCLZC,MAlBf,SAAuBC,GAOnB,OACI,gCACI,+CACA,yBAAQC,MAAOD,EAAMH,QAASK,SAAU,SAAAC,GAAC,OAAIH,EAAMI,WAAWD,EAAEE,OAAOJ,QAAvE,UACI,wBAAQA,WAAOK,KAVIC,EAWIP,EAAMO,YAV9BA,EAAYC,KAAI,SAAAC,GACnB,OAAQ,yBAA6BR,MAAOQ,EAAGC,YAAvC,UAAqDD,EAAGC,YAAxD,KAAuED,EAAGE,mBAA1E,MAAaF,EAAGC,uBAFhC,IAA+BH,G,gECS7BK,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAiCCC,MA7Bf,SAAoBhB,GAClB,IAAMiB,EAAUL,IACVM,EAAalB,EAAMkB,WACzB,OACE,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOC,UAAWN,EAAQH,MAAOU,aAAW,eAA5C,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,6BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,yBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,qCAGJ,cAACC,EAAA,EAAD,UACGX,EAAWV,KAAI,SAACsB,GAAD,OACd,eAACJ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWP,UAAU,KAAKW,MAAM,MAAhC,SACGD,EAAUE,gBAEb,cAACL,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BE,EAAUG,uBACpC,cAACN,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA+D,GAArCE,EAAUI,wBAA+B,OAAS,YAL/DJ,EAAUE,0BCyBtBG,MAlDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNrD,EADM,KACEsD,EADF,OAEaD,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,OAGyBH,mBAAS,IAHlC,mBAGN7B,EAHM,KAGOiC,EAHP,OAIiBJ,mBAAS,IAJ1B,mBAINvC,EAJM,KAIGO,EAJH,OAKuBgC,mBAAS,IALhC,mBAKNlB,EALM,KAKMuB,EALN,KAoCb,OA7BAC,qBAAU,WACJ3D,EACFF,EAAWC,eAAeC,GACvBE,MAAK,SAAAC,GACJsD,EAAetD,GACfqD,OAASjC,GACTF,OAAWE,MAEZqC,OAAM,SAAAxC,GAAC,OAAIoC,EAASpC,EAAEyC,aAEzBL,OAASjC,GACTkC,EAAe,IACfpC,OAAWE,MAEZ,CAACvB,IAEJ2D,qBAAU,WACJ7C,EACFhB,EAAWe,cAAcb,EAAQc,GAC9BZ,MAAK,SAAAC,GACJuD,EAAcvD,GACdqD,OAASjC,MAEVqC,OAAM,SAAAxC,GAAC,OAAIoC,EAASpC,EAAEyC,YAEzBH,EAAc,MAEf,CAAC1D,EAAQc,IAGV,sBAAK0B,UAAU,MAAf,UACE,8BAAMe,IACN,8CAAwB,uBAAOrC,MAAOlB,EAAQmB,SAAU,SAAAC,GAAC,OAAIkC,EAAUlC,EAAEE,OAAOJ,UAC/EM,EAAYsC,OAAS,GACpB,cAAC,EAAD,CAAetC,YAAaA,EAAaV,QAASA,EAASO,WAAYA,IAExEc,EAAW2B,OAAS,GACnB,cAAC,EAAD,CAAY3B,WAAYA,QCtCjB4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/D,MAAK,YAAkD,IAA/CgE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7e924386.chunk.js","sourcesContent":["const beaBaseUrl = 'https://apps.bea.gov/api/data/';\r\n\r\nconst beaService = {\r\n    getDatasetList(apiKey) {\r\n        return fetch(`${beaBaseUrl}?UserID=${apiKey}&method=getdatasetlist`)\r\n            .then(response => response.json())\r\n            .then(responseJson => responseJson.BEAAPI.Results)\r\n            .then(results => {\r\n                if (results.Error) {\r\n                    throw new Error(JSON.stringify(results.Error))\r\n                }\r\n                return results.Dataset\r\n            })\r\n    },\r\n\r\n    getParameters(apiKey, dataset) {\r\n        return fetch(`${beaBaseUrl}?UserID=${apiKey}&method=getparameterlist&datasetname=${dataset}`)\r\n        .then(response => response.json())\r\n        .then(responseJson => responseJson.BEAAPI.Results)\r\n        .then(results => {\r\n            if (results.Error) {\r\n                throw new Error(JSON.stringify(results.Error))\r\n            }\r\n            return results.Parameter\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default beaService;","function DatasetSelect(props) {\r\n    function getDatasetListOptions(datasetList) {\r\n        return datasetList.map(ds => {\r\n            return (<option key={ds.DatasetName} value={ds.DatasetName}>{ds.DatasetName} ({ds.DatasetDescription})</option>)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>Data set: </label>\r\n            <select value={props.dataset} onChange={e => props.setDataset(e.target.value)}>\r\n                <option value={undefined}></option>\r\n                {getDatasetListOptions(props.datasetList)}\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DatasetSelect;","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction Parameters(props) {\r\n  const classes = useStyles();\r\n  const parameters = props.parameters;\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Parameter Name</TableCell>\r\n            <TableCell align=\"right\">Description</TableCell>\r\n            <TableCell align=\"right\">Required Parameter</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {parameters.map((parameter) => (\r\n            <TableRow key={parameter.ParameterName}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {parameter.ParameterName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{parameter.ParameterDescription}</TableCell>\r\n              <TableCell align=\"right\">{parameter.ParameterIsRequiredFlag == 1 ? 'True' : 'False'}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default Parameters;\r\n","import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport beaService from './beaService';\r\nimport DatasetSelect from './DatasetSelect';\r\nimport Parameters from './Parameters';\r\n\r\nfunction App() {\r\n  const [apiKey, setApiKey] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [datasetList, setDatasetList] = useState([]);\r\n  const [dataset, setDataset] = useState('');\r\n  const [parameters, setParameters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (apiKey) {\r\n      beaService.getDatasetList(apiKey)\r\n        .then(response => {\r\n          setDatasetList(response)\r\n          setError(undefined)\r\n          setDataset(undefined)\r\n        })\r\n        .catch(e => setError(e.message))\r\n    } else {\r\n      setError(undefined)\r\n      setDatasetList([])\r\n      setDataset(undefined)\r\n    }\r\n  }, [apiKey])\r\n\r\n  useEffect(() => {\r\n    if (dataset) {\r\n      beaService.getParameters(apiKey, dataset)\r\n        .then(response => {\r\n          setParameters(response)\r\n          setError(undefined)\r\n        })\r\n        .catch(e => setError(e.message))\r\n    } else {\r\n      setParameters([])\r\n    }\r\n  }, [apiKey, dataset])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>{error}</div>\r\n      <label>API key: </label><input value={apiKey} onChange={e => setApiKey(e.target.value)}></input>\r\n      {datasetList.length > 0 &&\r\n        <DatasetSelect datasetList={datasetList} dataset={dataset} setDataset={setDataset} />\r\n      }\r\n      {parameters.length > 0 &&\r\n        <Parameters parameters={parameters}/>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}